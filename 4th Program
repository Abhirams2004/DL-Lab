import tensorflow as tf
from tensorflow.keras import layers, models
import matplotlib.pyplot as plt

# -------------------------------------------------
# 1. Load and preprocess dataset
# -------------------------------------------------
(x_train, _), (x_test, _) = tf.keras.datasets.mnist.load_data()

# Normalize to [0,1] and flatten to 784-dim vectors
x_train = x_train.astype("float32") / 255.0
x_test = x_test.astype("float32") / 255.0
x_train = x_train.reshape(len(x_train), 28 * 28)
x_test = x_test.reshape(len(x_test), 28 * 28)

# -------------------------------------------------
# 2. Build Encoder
# -------------------------------------------------
encoder = models.Sequential([
    layers.Input(shape=(784,)),
    layers.Dense(128, activation='relu'),
    layers.Dense(64, activation='relu'),
    layers.Dense(32, activation='relu')   # compressed representation
])

# -------------------------------------------------
# 3. Build Decoder
# -------------------------------------------------
decoder = models.Sequential([
    layers.Input(shape=(32,)),
    layers.Dense(64, activation='relu'),
    layers.Dense(128, activation='relu'),
    layers.Dense(784, activation='sigmoid')  # reconstruct image
])

# -------------------------------------------------
# 4. Build Autoencoder (Encoder + Decoder)
# -------------------------------------------------
autoencoder = models.Sequential([encoder, decoder])
autoencoder.compile(optimizer='adam', loss='mse')

# -------------------------------------------------
# 5. Train Autoencoder
# -------------------------------------------------
history = autoencoder.fit(
    x_train, x_train,
    epochs=5,
    batch_size=256,
    shuffle=True,
    validation_data=(x_test, x_test)
)

# -------------------------------------------------
# 6. Test Compression & Reconstruction
# -------------------------------------------------
encoded_imgs = encoder.predict(x_test[:10])
decoded_imgs = autoencoder.predict(x_test[:10])

# -------------------------------------------------
# 7. Visualize Original vs. Reconstructed Images
# -------------------------------------------------
n = 10  # number of images to display
plt.figure(figsize=(20, 4))

for i in range(n):
    # Original
    ax = plt.subplot(2, n, i + 1)
    plt.imshow(x_test[i].reshape(28, 28), cmap="gray")
    plt.title("Original")
    plt.axis("off")

    # Reconstructed
    ax = plt.subplot(2, n, i + 1 + n)
    plt.imshow(decoded_imgs[i].reshape(28, 28), cmap="gray")
    plt.title("Reconstructed")
    plt.axis("off")

plt.show()
